After the first game was completed, I started making minor improvements to the game engine, tweaking the code to make it a little faster
and using up the spare memory in the system to use lookup tables - these were integrated in to the first 'patch' release of the game, but I had bigger plans for Episode 2!

Chibi Akumas had always planned to be a 2 player game - I had made a bit of a joke of this by putting the S as an 'addition' to the title (and in brakets on the release info)... I had cut the game down to a 1 player only to reduce the chance of it never being finished.

Now it was time to make good on that plan! Fortunately, I had designed the game and built the code in a way that made it relatively easy, and it only took about 2 weeks to get the 2 player support almost perfect - it took some tricks, like moving the "Life" and "Smartbomb" icons half way down the screen, to get more than 16 plus sprites onscreen - but again I had always planned for this solution.

I had more drastic changes planned though, and the main one would be a lot of work! Episode 1 had the 2nd screen buffer at &4000 - but this was the area of memory where extra banks could be paged in - I wanted the second game to use more memory (even over 128k) and to do this I needed to swap the &4000 area and &8000 one - this meant a lot of reprogramming to get things working with the new layout!

at the same time I cleaned up the code - and put in compiler directives to allow for special CPC plus builds, 64k only builds and the like - and restructured the code so that the 'less important' parts were at the end of the code (such as star-array drawing - which isn't needed during the intro)... the plan was if I ran out of memory on 64k systems I could have multiple compiled versions of the game (so the 64k version didn't have 128k only code and vice-versa) and so I could overwrite some of the core with intro graphics... in the end neither of these functions were used... it's difficult coding a game like this - by the end you know what you should have done at the start, but by then it's too late - in this case I over designed things!

I also upgraded the fonts and text engine - I wanted the new game to have more dialog, and I neeed to be able to have the characters 'talk' ingame - so I made a half width font and coded the engine to uses it - this was a little tricky on the 464 (which doesn't have the memory for a bitmap font) as I had to scale the firmware font for my needs - but it worked!

The 'Crossfire' function (pressing both firebuttons) was actually a hidden feature in the first game - but I'd not figured out how to use it, so it was switched off - now it became coded in properly, linked to your score - although unfortunately the 36 player bullet limit EP2 had made it pretty useless - the new V1.666 has a 128 bullet limit, so maybe it will work now!

Ep1 could only work well with 24x24 sprites - so with Ep2 I recoded the sprite engine so clipping worked with different sizes of sprites - I wanted the sprites to be bigger now so I added some self modifying code to make things work with common sizes of sprite

I recoded the 'Object array' to also support bigger sprites - which meant reworking the 'player bullet hit' code - I already had to make major changes to this code to support the 2nd player, and did a lot of work re-optimizing it so that the extra player code would not slow things down. I also reprogrammed things so that instead of the 2 sprite banks Ep1 used , 4 were now available for even better animation on the 128k systems.

As well as upgrading the general Object array, I added a new Animator function... programming strange moving objects in the first game had meant a ton of ASM code - which was a pain to debug and test... I figured I could make this easier, so I added the 'Animator' function which allowed enemies to change their sprite/move/firepower in a timed pattern - this allowed better and more complex animaton and more animation too! - it also allowed objects to spawn other objects - so enemies could fire missiles and huge objects!

I had planned for EP2 to be much bigger - and it seemed adding compression to things was an important improvement The 'Sprite Compiler' was not really able to reduce the size of images - and it in fact usually made them larger. I decided to write my own RLE compressor to reduce the size of bitmap images - it took a week but I finally got it working (it was worth it - as I'm using it to compress ALL my MSX graphics!)... for general data compression I added roudoudou's LZ48_decrunch - Usually I'd try to write my own, but it seemed excessive to try to write something when Roudoudou's was so good and simple - and I'd just spent a ton of time on the RLE program! I rewrote the disk load routines to allow me to switch between compressed files and normal ones so I could easilly switch on compression once the game was done.

I wanted to improve the background - so I started developing a 'tile strip' routine, this would uses '16' pixel wide tiles to make a scrollable background strip - I spent a week developing it, and it worked... slowly! very slowly!... it made a significant difference to the game speed - and of course added no functionality - I was already using the stack to write data, using precalculated memory offsets, and aigned source data - there really seemed nothing I could do to speed it up, so I had to give up on the idea - instead I used a simpler 'repeating tile' - which is one 32 pixel sprite - it basically uses all 4 main register pairs and repeated PUSHes to fill an entire line with no extra calcualation - nowhere neer as good as the planned tilestrip, but much faster - so good enough!

With the game engine upgrades done, I could start writing the game!